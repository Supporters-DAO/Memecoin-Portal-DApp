type InitConfigFactory = struct {
  meme_code_id: CodeId,
  factory_admin_account: vec ActorId,
  gas_for_program: u64,
};

type CodeId = struct {
  [u8, 32],
};

type ActorId = struct {
  [u8, 32],
};

type MemeError = enum {
  ProgramInitializationFailedWithContext: str,
  Unauthorized,
  MemeExists,
  MemeNotFound,
};

type InitConfig = struct {
  name: str,
  symbol: str,
  decimals: u8,
  description: str,
  external_links: ExternalLinks,
  initial_supply: u128,
  total_supply: u128,
  admin: ActorId,
  initial_capacity: opt u32,
  config: Config,
};

type ExternalLinks = struct {
  image: str,
  website: opt str,
  telegram: opt str,
  twitter: opt str,
  discord: opt str,
  tokenomics: opt str,
};

type Config = struct {
  tx_storage_period: u64,
  tx_payment: u128,
};

constructor {
  New : (config: InitConfigFactory);
};

service MemeFactory {
  AddAdminToFactory : (admin_actor_id: ActorId) -> result (null, MemeError);
  CreateFungibleProgram : (init_config: InitConfig) -> result (null, MemeError);
  RemoveMeme : (meme_id: u64) -> result (null, MemeError);
  UpdateCodeId : (new_code_id: CodeId) -> result (null, MemeError);
  UpdateGasForProgram : (new_gas_amount: u64) -> result (null, MemeError);

  events {
    MemeCreated: struct { meme_id: u64, meme_address: ActorId, init_config: InitConfig };
    MemeRemoved: struct { removed_by: ActorId, meme_id: u64 };
    GasUpdatedSuccessfully: struct { updated_by: ActorId, new_gas_amount: u64 };
    CodeIdUpdatedSuccessfully: struct { updated_by: ActorId, new_code_id: CodeId };
    AdminAdded: struct { updated_by: ActorId, admin_actor_id: ActorId };
  }
};

